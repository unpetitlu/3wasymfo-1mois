parameters:
  genders:
    0: Homme
    1: Femme

services:
#    troiswa_back.example:
#        class: Troiswa\BackBundle\Example
#        arguments: [@service_id, "plain_value", %parameter%]

    troiswa.functions.util:
          class: Troiswa\BackBundle\Util\Utility

    troiswa.email: #Nom du service
      class: Troiswa\BackBundle\Email\Email #class du Service
      arguments: ["@mailer", "@twig"]
                  # Service Swift Mailer
                  # Service Twig


    troiswa.form.type.tel:
      class: Troiswa\BackBundle\Form\Type\TelType
      tags:
        - { name: form.type, alias: tel }


    troiswa.form.type.gender:
            class: Troiswa\BackBundle\Form\Type\GenderType
            arguments: ["%genders%"]
            tags:
                - { name: form.type, alias: gender }

    troiswa.form.type.tags:
      class: Troiswa\BackBundle\Form\Type\TagType
      arguments: ["@doctrine.orm.entity_manager", "Troiswa\BackBundle\Entity\Tag"]
      tags:
          - { name: form.type, alias: tags }

    troiswa.form.type.entity_hidden:
       class: Troiswa\BackBundle\Form\Type\EntityHiddenType
       arguments: ["@doctrine.orm.entity_manager"]
       tags:
          - { name: form.type, alias: entity_hidden }


    troiswa.validator.position.category:
          class: Troiswa\BackBundle\Validator\PositionCategoryValidator
          arguments: [@doctrine.orm.entity_manager]
          tags:
            - { name: validator.constraint_validator, alias: troiswa_validator_position_cat }

    troiswa.back.notification:
            # Classe avec Namespaces
            class: Troiswa\BackBundle\Notification\Notification
            arguments: ["@session"]


    troiswa.back.listener.product.persist:

            # Nom de la classe
            class: Troiswa\BackBundle\Listener\ProductListener

            # Argument du constructeur
            # Service de notification que l'on a crée juste en dessus
            # ATTENTION: L'injection des dépendances se fait si mon service n'est pas deja injecté ,
            # notement par le tag qui est associ à mon service
            arguments: ["@troiswa.back.notification"]

            # Ma classe utilisera le mecanisme d'écouteur de Symfony 2
            tags:
                # name: correspond au mecanisme ou ma classe sera affectée
                # et plus particulierement au mecanisme d'écouteur de doctrine

                # event: sera l'événement déclencheur de mon service
                # et plus particulierement à la modification d'un objet

                # method: la methode qui sera appellé après déclenchement de mon event
                # et plus particulierement la methode appelé dans mon service: postUpdate()
                # Evenement à doctrine: (Lifecycle)
                # Doctrine a une liste exhaustive d'evenement appelé "LifesCydle"
                # Cycle de vie d'un objet en Doctrine
                # + preRemove
                # + postRemove
                # + prePersist : quand je crée mon objet en base de donnée
                # + postPersist
                # + preUpdate : quand je modifie mon objet en base de donnée
                # + postUpdate
                # + postLoad
                # + loadClassMetadata

                # postUpdate:
                - { name: doctrine.event_listener, event: postUpdate, method: postUpdate }
                - { name: doctrine.event_listener, event: postPersist, method: postPersist }
                - { name: doctrine.event_listener, event: preUpdate, method: preUpdate }


    troiswa.back.security.access.blacklist_voter:
        class:      Troiswa\BackBundle\Security\Authorization\Voter\ClientIpVoter
        arguments:  [@service_container, [123.123.123.123, 171.171.171.171]]
        public:     false
        tags:
            - { name: security.voter }


    # listener perso
    troiswa.back.checkmessage_processor:
            class:     Troiswa\BackBundle\Listener\CheckMessageProcessor
            arguments: [@mailer]

    troiswa.back.checkmessage_listener:
            class:     Troiswa\BackBundle\Listener\CheckMessageListener
            arguments: [@troiswa.back.checkmessage_processor, [1, 2, 3]]
            tags:
                - { name: kernel.event_listener, event: troiswa.base_event.post_message, method: processMessage }


    troiswa.back.cart:
            class: Troiswa\BackBundle\Util\Cart
            arguments: ["@session"]


    troiswa.back.paypal:
        class: Troiswa\BackBundle\Util\Paypal
        arguments: [%user_paypal%, %pwd_paypal%, %signature_paypal%, %active_paypal%]


    troiswa.back.twig.util_extension:
            class: Troiswa\BackBundle\Twig\UtilExtension
            tags:
                - { name: twig.extension }


    troiswa.back.subscriber_main:
            class:     Troiswa\BackBundle\Subscriber\MainSubscriber
            tags:
              - { name: kernel.event_subscriber }


    troiswa.back.maintenance:
            class: Troiswa\BackBundle\Listener\MaintenanceListener
            arguments: [%maintenance%, %kernel.environment%,"@twig"]
            tags:
                - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest }


    troiswa.back.listener.authentification: #  Nom du service
           #  Nom de ma classe avec namespaces
           class: Troiswa\BackBundle\Listener\AuthentificationListener

           #  Nom des services injecté en constructeur de ma classe
           arguments: ["@doctrine.orm.entity_manager","@security.token_storage"]

           # Etende le mecanisme de security au niveau de linteraction login
           # avec un mecanisme d'écouteur
           tags:
             - { name: kernel.event_listener, event: security.interactive_login,method: onAuthenticationSuccess }